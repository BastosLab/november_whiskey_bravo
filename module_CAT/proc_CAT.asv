function proc_CAT(pp, nwb, rd, rii, recording_info)

switch recording_info.Raw_Data_Format{rii}
    case 'Blackrock NSx'

        [compiled_event_codes, compiled_event_times] = ...
            compile_nev_event_data( ...
            recording_info.Raw_Data_Path{rii});

        [realigned_event_codes, realigned_event_times, realigned_indices] = ...
            align_nev_event_data( ...
            compiled_event_codes, compiled_event_times, events_of_interest);

        clear compiled_event_codes compiled_event_times

        ns6s = findFiles(recording_info.Raw_Data_Path{rii}, '.ns6');

        n_blocks = strfind(lower(ns6s), 'block_');
        block_no = [];
        for ii = 1: numel(n_blocks)
            n_end = strfind(ns6s{ii}(n_blocks{ii}:end), '/');
            block_no(ii) = str2double(ns6s{ii}(n_blocks{ii}+6:n_blocks{ii}+n_end(1)-2));
        end

        n_instances = strfind(lower(ns6s), 'instance');
        instance_no = [];
        for ii = 1: numel(n_instances)
            n_end = strfind(ns6s{ii}(n_instances{ii}:end), '_');
            instance_no(ii) = str2double(ns6s{ii}(n_instances{ii}+8:n_instances{ii}+n_end(1)-2));
        end

        prev_cat_data_len = 0;
        total_cat_data_len = 0;
        for ii = instance_no
            cat_data = [];
            block_tracker = 1;
            for jj = 1:numel(instance_no)
                if instance_no(jj) == ii & block_no == block_tracker
                    temp_data = openNSx(ns6s{jj});
                    cat_data = [cat_data, temp_data.Data(:,realigned_indices{ii, block_tracker})];
                    clear temp_data temp_evts
                    block_tracker = block_tracker + 1;
                end
            end

            cat_data_len = size(cat_data,2);
            total_cat_data_len = 

            for jj = 1 : 128
                if ~exist([pp.CAT_DATA filesep nwb.identifier '_dev-' num2str(rd-1)], 'dir')
                    mkdir([pp.CAT_DATA filesep nwb.identifier '_dev-' num2str(rd-1)]);
                end
                if jj < 11
                    file_name = ['amp-' alphabet(ii) '-00' num2str(jj-1) '.dat'];
                elseif jj < 101
                    file_name = ['amp-' alphabet(ii) '-0' num2str(jj-1) '.dat'];
                else
                    file_name = ['amp-' alphabet(ii) '-' num2str(jj-1) '.dat'];
                end
                write_file_id = fopen([pp.CAT_DATA nwb.identifier '_dev-' num2str(rd-1) filesep file_name], 'w');
                fwrite(write_file_id, cat_data(jj,:), 'int16');
                fclose(write_file_id);
            end
            for jj = 129:144
                if size(cat_data, 1) >= jj
                    file_name = ['board-ANALOG-IN-' num2str(jj-128)*(16*(ii-1)) '.dat'];
                    write_file_id = fopen([pp.CAT_DATA filesep nwb.identifier '_dev-' num2str(rd-1) filesep file_name], 'w');
                    fwrite(write_file_id, cat_data(jj,:), 'int16');
                    fclose(write_file_id);
                end
            end
            file_name = 'board-DIGITAL-IN-aggregated.mat';
            save([pp.CAT_DATA filesep nwb.identifier '_dev-' num2str(rd-1) filesep file_name], ...
                'event_codes', 'event_times', '-v7.3', '-nocompression')
            clear cat_data event_codes event_times

            prev_cat_data_len = cat_data_len;
        end

end
end